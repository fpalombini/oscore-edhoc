



CoRE Working Group                                          F. Palombini
Internet-Draft                                                  Ericsson
Intended status: Standards Track                             3 July 2020
Expires: 4 January 2021


                     Implementing EDHOC and OSCORE
                draft-palombini-core-oscore-edhoc-latest

Abstract

   TODO Abstract

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 4 January 2021.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.








Palombini                Expires 4 January 2021                 [Page 1]

Internet-Draft               EDHOC + OSCORE                    July 2020


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Background  . . . . . . . . . . . . . . . . . . . . . . . . .   2
   3.  EDHOC in OSCORE Protected CoAP  . . . . . . . . . . . . . . .   4
     3.1.  Signalling in a New EDHOC Option  . . . . . . . . . . . .   5
     3.2.  Signalling in the OSCORE Option . . . . . . . . . . . . .   5
   4.  OSCORE Request in a COAP message  . . . . . . . . . . . . . .   6
     4.1.  Signalling in a New EDHOC Option  . . . . . . . . . . . .   6
     4.2.  Predetermined . . . . . . . . . . . . . . . . . . . . . .   7
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .   7
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   7
   7.  Normative References  . . . . . . . . . . . . . . . . . . . .   7
   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .   8
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   8

1.  Introduction

   This document presents possible options to combine the EDHOC protocol
   [I-D.selander-lake-edhoc], run over CoAP [RFC7252], with the first
   subsequent OSCORE [RFC8613] transaction.  This allows to minimize the
   number of roundtrips necessary to setup the OSCORE security material.
   The goal of this specification is to gather opinions on each option,
   and develop only one of these options.

1.1.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   The reader is expected to be familiar with terms and concepts of
   [RFC7252], [RFC8613] and [I-D.selander-lake-edhoc].

2.  Background

   EDHOC is a 3 message key exchange protocol.  Section 7.1 of
   [I-D.selander-lake-edhoc] specifes how to transport EDHOC over CoAP:
   the EDHOC data (referred to as "EDHOC messages") are transported in
   the payload of CoAP requests and responses.  More specifically, the
   Initiator, acting as CoAP Client, sends a POST request to a reserved
   resource at the Responder, acting as CoAP Server.  This triggers the
   EDHOC exchange on the CoAP Server, which replies with 2.04 (Changed)
   Response containing EDHOC message 2.  The EDHOC message 3 is also
   sent by the CoAP Client in a CoAP POST request to the same resource



Palombini                Expires 4 January 2021                 [Page 2]

Internet-Draft               EDHOC + OSCORE                    July 2020


   used for EDHOC message 1.  The Content-Format of these CoAP messages
   is set to "application/edhoc".

   After this exchange takes place, and after successful verifications
   specified in the EDHOC protocol, Client and Server derive the OSCORE
   Security Context, as specified in Section 7.1.1 of
   [I-D.selander-lake-edhoc].  They are then ready to use OSCORE.

   This sequential way of running EDHOC and then OSCORE is specified in
   Figure 1.  As shown, this mechanism is executed in 3 roundtrips.

         CoAP Client                                  CoAP Server
              | ------------- EDHOC message_1 ------------> |
              |                                             |
              | <------------ EDHOC message_2 ------------- |
              |                                             |
      EDHOC verification                                    |
              |                                             |
              | ------------- EDHOC message_3 ------------> |
              |                                             |
              |                                    EDHOC verification
              |                                             |
      OSCORE Sec Ctx                                OSCORE Sec Ctx
        Derivation                                    Derivation
              |                                             |
              | -------------- OSCORE Request ------------> |
              |                                             |
              | <------------ OSCORE Response ------------- |
              |                                             |

                Figure 1: EDHOC and OSCORE run sequentially

   The number of roundtrips can be minimized: after receiving EDHOC
   message 2, the CoAP Client has all the information needed to derive
   the OSCORE Sec Ctx before sending EDHOC message 3.  That means that
   it can potentially send at the same time both EDHOC message 3 and the
   subsequent OSCORE Request.  On a semantyc level, this approach
   requires in practice to send two separate REST requests at the same
   time.  Defining the specific details of how to transport the data and
   order of processing is the goal of this specification.

   The high level message flow of running EDHOC and OSCORE combined is
   shown in Figure 2.








Palombini                Expires 4 January 2021                 [Page 3]

Internet-Draft               EDHOC + OSCORE                    July 2020


         CoAP Client                                  CoAP Server
              | ------------- EDHOC message_1 ------------> |
              |                                             |
              | <------------ EDHOC message_2 ------------- |
              |                                             |
      EDHOC verification +                                  |
        OSCORE Sec Ctx                                      |
          Derivation                                        |
              |                                             |
              | ------------- EDHOC message_3 ------------> |
              |              + OSCORE Request               |
              |                                             |
              |                                  EDHOC verification +
              |                                     OSCORE Sec Ctx
              |                                        Derivation
              |                                             |
              | <------------ OSCORE Response ------------- |
              |                                             |

                    Figure 2: EDHOC and OSCORE combined

3.  EDHOC in OSCORE Protected CoAP

   The first possibility is to send the EDHOC message 3 inside an OSCORE
   protected CoAP message.  The request is in practice the OSCORE CoAP
   Request from Figure 1, sent to the protected resource andpoint and
   with correct CoAP method and options, with the addition that it also
   transports EDHOC message 3.  As EDHOC message 3 is too large for
   being contained in a CoAP Option, it would have to be transported in
   the CoAP payload.  The payload is formatted as a CBOR sequence of two
   CBOR wrapped items: the EDHOC message 3 and the OSCORE ciphertext, in
   this order.

   When receiving such a request, the Server needs to execute the
   following processing, additional to EDHOC, OSCORE and CoAP
   processing:

   1.  Parse the signalling option to identify that this is an OSCORE +
       EDHOC request (more in Section 3.1 and Section 3.2).

   2.  Extract the EDHOC message 3 from the payload.

   3.  Execute the EDHOC processing, including verifications and OSCORE
       Security Context derivation.

   4.  Decrypt and verify the remaining OSCORE protected CoAP request as
       defined by OSCORE.




Palombini                Expires 4 January 2021                 [Page 4]

Internet-Draft               EDHOC + OSCORE                    July 2020


   5.  Process the CoAP requests.

   The following sections describe 2 ways of signalling that the EDHOC
   message is transported in the OSCORE message.  In a next update of
   these document, we will

3.1.  Signalling in a New EDHOC Option

   One way to signal that the Server is to extract and process EDHOC
   message 3 before the OSCORE message is processed is to define a new
   CoAP Option, called the EDHOC Option.

   This Option being present (either in a request or response) means the
   payload contains EDHOC data in the payload, that must be extracted
   and processed before the rest of the message can be executed.  The
   EDHOC message is to be extracted from the CoAP payload as the CBOR
   wrapped first element of a CBOR sequence.

   The Option is critical, Safe-to-Forward, and part of the Cache-Key.

   The Option value is always empty.  If any value is sent, the value is
   simply discarded.

   The Option must occurr at most once.

   The Option is of Class U for OSCORE.

3.2.  Signalling in the OSCORE Option

   Another way to signal that the EDHOC message is to be extracted from
   the CoAP payload as the CBOR wrapped first element of a CBOR
   sequence, and that the processing defined in Section 3 is to be
   executed is to use one of the OSCORE Flag Bits.

   Bit Postion: 8

   Name: EDHOC

   Description: Set to 1 if the payload is a sequence of EDHOC data and
   OSCORE payload.

   Reference: this document









Palombini                Expires 4 January 2021                 [Page 5]

Internet-Draft               EDHOC + OSCORE                    July 2020


4.  OSCORE Request in a COAP message

   Instead of transporting the EDHOC message inside an OSCORE message,
   the OSCORE protected data could be transported in a EDHOC message.
   The request is in practice the CoAP POST Request containing EDHOC
   message 3 from Figure 1, sent to the unprotected resource andpoint
   reserved to EDHOC processing, with the addition that it also
   transports the OSCORE Option and Ciphertext.  The OSCORE Option and
   ciphertext contain all the information to reconstruct the original
   OSCORE Request, including CoAP method, options and payload.  Both
   OSCORE Option, EDHOC message_3 and ciphertext would have to be
   transported in the CoAP payload.  The payload is formatted as a CBOR
   sequence of three CBOR wrapped items: the EDHOC message 3, the OSCORE
   Option and the OSCORE ciphertext, in this order.

   When receiving such a request, the Server needs to execute the
   following processing, additional to EDHOC, OSCORE and CoAP
   processing:

   1.  Parse the signalling option to identify that this is an EDHOC +
       OSCORE request (more in Section 4.1 and Section 4.2).

   2.  Extract the EDHOC message 3 from the payload.

   3.  Execute the EDHOC processing, including verifications and OSCORE
       Security Context derivation.

   4.  Extract the OSCORE Option value and ciphertext from the payload
       and reconstruct the OSCORE protected CoAP request.

   5.  Decrypt and verify the reconstructed OSCORE protected CoAP
       request as defined by OSCORE.

   6.  Process the CoAP requests.

   This processing requires one more step, as the server must build the
   protected request from the payload before being able to process it.

4.1.  Signalling in a New EDHOC Option

   One way to signal that the Server is to build and process the OSCORE
   request after EDHOC processing is to define a new CoAP Option, called
   the EDHOC Option.

   This Option being present (either in a request or response) means the
   payload contains OSCORE option value and ciphertext in the payload,
   that must be extracted and processed after the EDHOC processing.  The
   OSCORE option and ciphertext are to be extracted from the CoAP



Palombini                Expires 4 January 2021                 [Page 6]

Internet-Draft               EDHOC + OSCORE                    July 2020


   payload as the CBOR wrapped second and third element of a CBOR
   sequence.

   The Option is critical, Safe-to-Forward, and part of the Cache-Key.

   The Option value is always empty.  If any value is sent, the value is
   simply discarded.

   The Option must occurr at most once.

   The Option is of Class U for OSCORE.

4.2.  Predetermined

   Another way to support the combined mode and to mandate that the
   Server is to build and process the OSCORE request after EDHOC
   processing is to set up pre-determined policies in place in both the
   Client and Server.

   A Client may be set up to support at the same time receiving only
   EDHOC message 3 or both EDHOC message 3 and OSCORE Option and
   ciphertext in the request.  The Client would be able to distinguish
   based on the number of CBOR elements in the payload, and process the
   message accordingly.

5.  Security Considerations

   TODO Security

6.  IANA Considerations

   This document has no IANA actions.

7.  Normative References

   [I-D.ietf-cbor-7049bis]
              Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", Work in Progress, Internet-Draft,
              draft-ietf-cbor-7049bis-14, 16 June 2020,
              <http://www.ietf.org/internet-drafts/draft-ietf-cbor-
              7049bis-14.txt>.

   [I-D.selander-lake-edhoc]
              Selander, G., Mattsson, J., and F. Palombini, "Ephemeral
              Diffie-Hellman Over COSE (EDHOC)", Work in Progress,
              Internet-Draft, draft-selander-lake-edhoc-01, 9 March
              2020, <http://www.ietf.org/internet-drafts/draft-selander-
              lake-edhoc-01.txt>.



Palombini                Expires 4 January 2021                 [Page 7]

Internet-Draft               EDHOC + OSCORE                    July 2020


   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, "The Constrained
              Application Protocol (CoAP)", RFC 7252,
              DOI 10.17487/RFC7252, June 2014,
              <https://www.rfc-editor.org/info/rfc7252>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8613]  Selander, G., Mattsson, J., Palombini, F., and L. Seitz,
              "Object Security for Constrained RESTful Environments
              (OSCORE)", RFC 8613, DOI 10.17487/RFC8613, July 2019,
              <https://www.rfc-editor.org/info/rfc8613>.

Acknowledgments

   Jim Schaad, Malisa Vucinic, Klaus Hartke, Christian Amsuess

Author's Address

   Francesca Palombini
   Ericsson

   Email: francesca.palombini@ericsson.com






















Palombini                Expires 4 January 2021                 [Page 8]
